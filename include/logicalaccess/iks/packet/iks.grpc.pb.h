// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: iks.proto
#ifndef GRPC_iks_2eproto__INCLUDED
#define GRPC_iks_2eproto__INCLUDED

#include "iks.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

class IKSService final {
 public:
  static constexpr char const* service_full_name() {
    return "IKSService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Request random data from the server.
    virtual ::grpc::Status GenRandom(::grpc::ClientContext* context, const ::CMSG_GenRandom& request, ::SMSG_GenRandom* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_GenRandom>> AsyncGenRandom(::grpc::ClientContext* context, const ::CMSG_GenRandom& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_GenRandom>>(AsyncGenRandomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_GenRandom>> PrepareAsyncGenRandom(::grpc::ClientContext* context, const ::CMSG_GenRandom& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_GenRandom>>(PrepareAsyncGenRandomRaw(context, request, cq));
    }
    // Generic AES Encryption routine.
    // No padding management.
    virtual ::grpc::Status AESEncrypt(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::SMSG_AESResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_AESResult>> AsyncAESEncrypt(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_AESResult>>(AsyncAESEncryptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_AESResult>> PrepareAsyncAESEncrypt(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_AESResult>>(PrepareAsyncAESEncryptRaw(context, request, cq));
    }
    // Generic AES Decryption routine.
    // No padding management.
    virtual ::grpc::Status AESDecrypt(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::SMSG_AESResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_AESResult>> AsyncAESDecrypt(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_AESResult>>(AsyncAESDecryptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_AESResult>> PrepareAsyncAESDecrypt(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_AESResult>>(PrepareAsyncAESDecryptRaw(context, request, cq));
    }
    // Desfire Authentication -- Step 1
    virtual ::grpc::Status DESFireAuth1(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step1& request, ::SMSG_DesfireAuth_Step1* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_DesfireAuth_Step1>> AsyncDESFireAuth1(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_DesfireAuth_Step1>>(AsyncDESFireAuth1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_DesfireAuth_Step1>> PrepareAsyncDESFireAuth1(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_DesfireAuth_Step1>>(PrepareAsyncDESFireAuth1Raw(context, request, cq));
    }
    // Desfire Authentication -- Step 2
    virtual ::grpc::Status DESFireAuth2(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step2& request, ::SMSG_DesfireAuth_Step2* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_DesfireAuth_Step2>> AsyncDESFireAuth2(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_DesfireAuth_Step2>>(AsyncDESFireAuth2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_DesfireAuth_Step2>> PrepareAsyncDESFireAuth2(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_DesfireAuth_Step2>>(PrepareAsyncDESFireAuth2Raw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_GenRandom>* AsyncGenRandomRaw(::grpc::ClientContext* context, const ::CMSG_GenRandom& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_GenRandom>* PrepareAsyncGenRandomRaw(::grpc::ClientContext* context, const ::CMSG_GenRandom& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_AESResult>* AsyncAESEncryptRaw(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_AESResult>* PrepareAsyncAESEncryptRaw(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_AESResult>* AsyncAESDecryptRaw(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_AESResult>* PrepareAsyncAESDecryptRaw(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_DesfireAuth_Step1>* AsyncDESFireAuth1Raw(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step1& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_DesfireAuth_Step1>* PrepareAsyncDESFireAuth1Raw(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step1& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_DesfireAuth_Step2>* AsyncDESFireAuth2Raw(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step2& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::SMSG_DesfireAuth_Step2>* PrepareAsyncDESFireAuth2Raw(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step2& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GenRandom(::grpc::ClientContext* context, const ::CMSG_GenRandom& request, ::SMSG_GenRandom* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_GenRandom>> AsyncGenRandom(::grpc::ClientContext* context, const ::CMSG_GenRandom& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_GenRandom>>(AsyncGenRandomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_GenRandom>> PrepareAsyncGenRandom(::grpc::ClientContext* context, const ::CMSG_GenRandom& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_GenRandom>>(PrepareAsyncGenRandomRaw(context, request, cq));
    }
    ::grpc::Status AESEncrypt(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::SMSG_AESResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_AESResult>> AsyncAESEncrypt(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_AESResult>>(AsyncAESEncryptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_AESResult>> PrepareAsyncAESEncrypt(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_AESResult>>(PrepareAsyncAESEncryptRaw(context, request, cq));
    }
    ::grpc::Status AESDecrypt(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::SMSG_AESResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_AESResult>> AsyncAESDecrypt(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_AESResult>>(AsyncAESDecryptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_AESResult>> PrepareAsyncAESDecrypt(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_AESResult>>(PrepareAsyncAESDecryptRaw(context, request, cq));
    }
    ::grpc::Status DESFireAuth1(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step1& request, ::SMSG_DesfireAuth_Step1* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_DesfireAuth_Step1>> AsyncDESFireAuth1(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_DesfireAuth_Step1>>(AsyncDESFireAuth1Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_DesfireAuth_Step1>> PrepareAsyncDESFireAuth1(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_DesfireAuth_Step1>>(PrepareAsyncDESFireAuth1Raw(context, request, cq));
    }
    ::grpc::Status DESFireAuth2(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step2& request, ::SMSG_DesfireAuth_Step2* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_DesfireAuth_Step2>> AsyncDESFireAuth2(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_DesfireAuth_Step2>>(AsyncDESFireAuth2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_DesfireAuth_Step2>> PrepareAsyncDESFireAuth2(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::SMSG_DesfireAuth_Step2>>(PrepareAsyncDESFireAuth2Raw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::SMSG_GenRandom>* AsyncGenRandomRaw(::grpc::ClientContext* context, const ::CMSG_GenRandom& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SMSG_GenRandom>* PrepareAsyncGenRandomRaw(::grpc::ClientContext* context, const ::CMSG_GenRandom& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SMSG_AESResult>* AsyncAESEncryptRaw(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SMSG_AESResult>* PrepareAsyncAESEncryptRaw(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SMSG_AESResult>* AsyncAESDecryptRaw(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SMSG_AESResult>* PrepareAsyncAESDecryptRaw(::grpc::ClientContext* context, const ::CMSG_AESOperation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SMSG_DesfireAuth_Step1>* AsyncDESFireAuth1Raw(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step1& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SMSG_DesfireAuth_Step1>* PrepareAsyncDESFireAuth1Raw(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step1& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SMSG_DesfireAuth_Step2>* AsyncDESFireAuth2Raw(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step2& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::SMSG_DesfireAuth_Step2>* PrepareAsyncDESFireAuth2Raw(::grpc::ClientContext* context, const ::CMSG_DesfireAuth_Step2& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GenRandom_;
    const ::grpc::internal::RpcMethod rpcmethod_AESEncrypt_;
    const ::grpc::internal::RpcMethod rpcmethod_AESDecrypt_;
    const ::grpc::internal::RpcMethod rpcmethod_DESFireAuth1_;
    const ::grpc::internal::RpcMethod rpcmethod_DESFireAuth2_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Request random data from the server.
    virtual ::grpc::Status GenRandom(::grpc::ServerContext* context, const ::CMSG_GenRandom* request, ::SMSG_GenRandom* response);
    // Generic AES Encryption routine.
    // No padding management.
    virtual ::grpc::Status AESEncrypt(::grpc::ServerContext* context, const ::CMSG_AESOperation* request, ::SMSG_AESResult* response);
    // Generic AES Decryption routine.
    // No padding management.
    virtual ::grpc::Status AESDecrypt(::grpc::ServerContext* context, const ::CMSG_AESOperation* request, ::SMSG_AESResult* response);
    // Desfire Authentication -- Step 1
    virtual ::grpc::Status DESFireAuth1(::grpc::ServerContext* context, const ::CMSG_DesfireAuth_Step1* request, ::SMSG_DesfireAuth_Step1* response);
    // Desfire Authentication -- Step 2
    virtual ::grpc::Status DESFireAuth2(::grpc::ServerContext* context, const ::CMSG_DesfireAuth_Step2* request, ::SMSG_DesfireAuth_Step2* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GenRandom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GenRandom() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GenRandom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenRandom(::grpc::ServerContext* context, const ::CMSG_GenRandom* request, ::SMSG_GenRandom* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGenRandom(::grpc::ServerContext* context, ::CMSG_GenRandom* request, ::grpc::ServerAsyncResponseWriter< ::SMSG_GenRandom>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AESEncrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AESEncrypt() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AESEncrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AESEncrypt(::grpc::ServerContext* context, const ::CMSG_AESOperation* request, ::SMSG_AESResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAESEncrypt(::grpc::ServerContext* context, ::CMSG_AESOperation* request, ::grpc::ServerAsyncResponseWriter< ::SMSG_AESResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AESDecrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AESDecrypt() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AESDecrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AESDecrypt(::grpc::ServerContext* context, const ::CMSG_AESOperation* request, ::SMSG_AESResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAESDecrypt(::grpc::ServerContext* context, ::CMSG_AESOperation* request, ::grpc::ServerAsyncResponseWriter< ::SMSG_AESResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DESFireAuth1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DESFireAuth1() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DESFireAuth1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DESFireAuth1(::grpc::ServerContext* context, const ::CMSG_DesfireAuth_Step1* request, ::SMSG_DesfireAuth_Step1* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDESFireAuth1(::grpc::ServerContext* context, ::CMSG_DesfireAuth_Step1* request, ::grpc::ServerAsyncResponseWriter< ::SMSG_DesfireAuth_Step1>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DESFireAuth2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DESFireAuth2() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DESFireAuth2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DESFireAuth2(::grpc::ServerContext* context, const ::CMSG_DesfireAuth_Step2* request, ::SMSG_DesfireAuth_Step2* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDESFireAuth2(::grpc::ServerContext* context, ::CMSG_DesfireAuth_Step2* request, ::grpc::ServerAsyncResponseWriter< ::SMSG_DesfireAuth_Step2>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GenRandom<WithAsyncMethod_AESEncrypt<WithAsyncMethod_AESDecrypt<WithAsyncMethod_DESFireAuth1<WithAsyncMethod_DESFireAuth2<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GenRandom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GenRandom() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GenRandom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GenRandom(::grpc::ServerContext* context, const ::CMSG_GenRandom* request, ::SMSG_GenRandom* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AESEncrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AESEncrypt() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AESEncrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AESEncrypt(::grpc::ServerContext* context, const ::CMSG_AESOperation* request, ::SMSG_AESResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AESDecrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AESDecrypt() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AESDecrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AESDecrypt(::grpc::ServerContext* context, const ::CMSG_AESOperation* request, ::SMSG_AESResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DESFireAuth1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DESFireAuth1() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DESFireAuth1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DESFireAuth1(::grpc::ServerContext* context, const ::CMSG_DesfireAuth_Step1* request, ::SMSG_DesfireAuth_Step1* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DESFireAuth2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DESFireAuth2() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DESFireAuth2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DESFireAuth2(::grpc::ServerContext* context, const ::CMSG_DesfireAuth_Step2* request, ::SMSG_DesfireAuth_Step2* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GenRandom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GenRandom() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::CMSG_GenRandom, ::SMSG_GenRandom>(std::bind(&WithStreamedUnaryMethod_GenRandom<BaseClass>::StreamedGenRandom, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GenRandom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GenRandom(::grpc::ServerContext* context, const ::CMSG_GenRandom* request, ::SMSG_GenRandom* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGenRandom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CMSG_GenRandom,::SMSG_GenRandom>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AESEncrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AESEncrypt() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::CMSG_AESOperation, ::SMSG_AESResult>(std::bind(&WithStreamedUnaryMethod_AESEncrypt<BaseClass>::StreamedAESEncrypt, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AESEncrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AESEncrypt(::grpc::ServerContext* context, const ::CMSG_AESOperation* request, ::SMSG_AESResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAESEncrypt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CMSG_AESOperation,::SMSG_AESResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AESDecrypt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AESDecrypt() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::CMSG_AESOperation, ::SMSG_AESResult>(std::bind(&WithStreamedUnaryMethod_AESDecrypt<BaseClass>::StreamedAESDecrypt, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AESDecrypt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AESDecrypt(::grpc::ServerContext* context, const ::CMSG_AESOperation* request, ::SMSG_AESResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAESDecrypt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CMSG_AESOperation,::SMSG_AESResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DESFireAuth1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DESFireAuth1() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::CMSG_DesfireAuth_Step1, ::SMSG_DesfireAuth_Step1>(std::bind(&WithStreamedUnaryMethod_DESFireAuth1<BaseClass>::StreamedDESFireAuth1, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DESFireAuth1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DESFireAuth1(::grpc::ServerContext* context, const ::CMSG_DesfireAuth_Step1* request, ::SMSG_DesfireAuth_Step1* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDESFireAuth1(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CMSG_DesfireAuth_Step1,::SMSG_DesfireAuth_Step1>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DESFireAuth2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DESFireAuth2() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::CMSG_DesfireAuth_Step2, ::SMSG_DesfireAuth_Step2>(std::bind(&WithStreamedUnaryMethod_DESFireAuth2<BaseClass>::StreamedDESFireAuth2, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DESFireAuth2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DESFireAuth2(::grpc::ServerContext* context, const ::CMSG_DesfireAuth_Step2* request, ::SMSG_DesfireAuth_Step2* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDESFireAuth2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CMSG_DesfireAuth_Step2,::SMSG_DesfireAuth_Step2>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GenRandom<WithStreamedUnaryMethod_AESEncrypt<WithStreamedUnaryMethod_AESDecrypt<WithStreamedUnaryMethod_DESFireAuth1<WithStreamedUnaryMethod_DESFireAuth2<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GenRandom<WithStreamedUnaryMethod_AESEncrypt<WithStreamedUnaryMethod_AESDecrypt<WithStreamedUnaryMethod_DESFireAuth1<WithStreamedUnaryMethod_DESFireAuth2<Service > > > > > StreamedService;
};


#endif  // GRPC_iks_2eproto__INCLUDED
